/* 
 * SwaggerApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Book
    /// </summary>
    [DataContract]
    public partial class Book :  IEquatable<Book>, IValidatableObject
    {
        /// <summary>
        /// Defines AvailableFormats
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailableFormatsEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 0,
            
            /// <summary>
            /// Enum Hardcover for value: Hardcover
            /// </summary>
            [EnumMember(Value = "Hardcover")]
            Hardcover = 10,
            
            /// <summary>
            /// Enum Ebook for value: Ebook
            /// </summary>
            [EnumMember(Value = "Ebook")]
            Ebook = 20,
            
            /// <summary>
            /// Enum Audiobook for value: Audiobook
            /// </summary>
            [EnumMember(Value = "Audiobook")]
            Audiobook = 30
        }


        /// <summary>
        /// Gets or Sets AvailableFormats
        /// </summary>
        [DataMember(Name="AvailableFormats", EmitDefaultValue=false)]
        public List<AvailableFormatsEnum> AvailableFormats { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Book" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="author">author.</param>
        /// <param name="releaseDate">releaseDate.</param>
        /// <param name="availableFormats">availableFormats.</param>
        public Book(Guid? id = default(Guid?), string title = default(string), string author = default(string), DateTime? releaseDate = default(DateTime?), List<AvailableFormatsEnum> availableFormats = default(List<AvailableFormatsEnum>))
        {
            this.Id = id;
            this.Title = title;
            this.Author = author;
            this.ReleaseDate = releaseDate;
            this.AvailableFormats = availableFormats;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="Author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseDate
        /// </summary>
        [DataMember(Name="ReleaseDate", EmitDefaultValue=false)]
        public DateTime? ReleaseDate { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Book {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  AvailableFormats: ").Append(AvailableFormats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Book);
        }

        /// <summary>
        /// Returns true if Book instances are equal
        /// </summary>
        /// <param name="input">Instance of Book to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Book input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                ) && 
                (
                    this.AvailableFormats == input.AvailableFormats ||
                    this.AvailableFormats != null &&
                    this.AvailableFormats.SequenceEqual(input.AvailableFormats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.ReleaseDate != null)
                    hashCode = hashCode * 59 + this.ReleaseDate.GetHashCode();
                if (this.AvailableFormats != null)
                    hashCode = hashCode * 59 + this.AvailableFormats.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
